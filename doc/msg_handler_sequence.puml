@startuml

title "sequence about sqsd handler"
hide footbox

participant MessageReceiver
participant SQS
participant QueueTracker
participant JobHandler
participant HandleJob
participant Worker

MessageReceiver -> MessageReceiver : Run()
activate MessageReceiver

MessageReceiver -> QueueTracker : IsWorking()
activate QueueTracker
MessageReceiver <-- QueueTracker : bool
deactivate QueueTracker

MessageReceiver -> SQS : GetMessages()
activate SQS
MessageReceiver <-- SQS : []*sqs.Message
deactivate SQS

loop HandleMessage([]*sqs.Message)
  MessageReceiver -> MessageReceiver : Newjob(*sqs.Message) *Job
  MessageReceiver -> QueueTracker : Register(*job)
  activate QueueTracker

  QueueTracker -> QueueTracker : jobStack <- struct{}{}
  QueueTracker -> QueueTracker : CurrentWorkings.Store(job.ID(), job)
  JobHandler <-- QueueTracker : <-tracker.NextJob()
  deactivate QueueTracker
  activate JobHandler

  JobHandler ->> HandleJob : goroutine
  activate HandleJob
  deactivate JobHandler
end

HandleJob -> Worker : <POST Request>
activate Worker
Worker -> Worker : <work hard!>
HandleJob <-- Worker : <HTTP response>
deactivate Worker
HandleJob -> SQS : DeleteMessage(*sqs.Message)
activate SQS
HandleJob <-- SQS
deactivate SQS
HandleJob -> QueueTracker : Complete(*Job)
activate QueueTracker
QueueTracker -> QueueTracker : CurrentWorkings.Delete(job.ID())
QueueTracker -> QueueTracker : <- jobStack
HandleJob <-- QueueTracker
deactivate QueueTracker
deactivate HandleJob

@enduml