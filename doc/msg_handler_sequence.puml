@startuml

title "sequence about sqsd handler"
hide footbox

participant MessageProducer
participant SQS
participant QueueTracker
participant MessageConsumer
participant HandleJob
participant Worker

MessageProducer -> MessageProducer : Run()
activate MessageProducer

MessageProducer -> QueueTracker : IsWorking()
activate QueueTracker
MessageProducer <-- QueueTracker : bool
deactivate QueueTracker

MessageProducer -> SQS : GetMessages()
activate SQS
MessageProducer <-- SQS : []*sqs.Message
deactivate SQS

loop HandleMessage([]*sqs.Message)
  MessageProducer -> MessageProducer : NewQueue(*sqs.Message) *Queue
  MessageProducer -> QueueTracker : Register(*queue)
  activate QueueTracker

  QueueTracker -> QueueTracker : queueStack <- struct{}{}
  QueueTracker -> QueueTracker : CurrentWorkings.Store(queue.ID(), queue)
  MessageConsumer <-- QueueTracker : <-tracker.NextQueue()
  deactivate QueueTracker
  activate MessageConsumer

  MessageConsumer ->> HandleJob : goroutine
  activate HandleJob
  deactivate MessageConsumer
end

HandleJob -> Worker : <POST Request>
activate Worker
Worker -> Worker : <work hard!>
HandleJob <-- Worker : <HTTP response>
deactivate Worker
HandleJob -> SQS : DeleteMessage(*sqs.Message)
activate SQS
HandleJob <-- SQS
deactivate SQS
HandleJob -> QueueTracker : Complete(*Queue)
activate QueueTracker
QueueTracker -> QueueTracker : CurrentWorkings.Delete(queue.ID())
QueueTracker -> QueueTracker : <- queueStack
HandleJob <-- QueueTracker
deactivate QueueTracker
deactivate HandleJob

@enduml