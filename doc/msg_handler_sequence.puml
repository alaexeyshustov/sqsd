@startuml

title "sequence about sqsd handler"
hide footbox

participant MessageReceiver
participant SQS
participant JobTracker
participant JobHandler
participant HandleJob
participant Worker

MessageReceiver -> MessageReceiver : Run()
activate MessageReceiver

MessageReceiver -> JobTracker : IsWorking()
activate JobTracker
MessageReceiver <-- JobTracker : bool
deactivate JobTracker

MessageReceiver -> SQS : GetMessages()
activate SQS
MessageReceiver <-- SQS : []*sqs.Message
deactivate SQS

loop HandleMessage([]*sqs.Message)
  MessageReceiver -> MessageReceiver : Newjob(*sqs.Message) *Job
  MessageReceiver -> JobTracker : Register(*job)
  activate JobTracker

  JobTracker -> JobTracker : jobStack <- struct{}{}
  JobTracker -> JobTracker : CurrentWorkings.Store(job.ID(), job)
  JobHandler <-- JobTracker : <-tracker.NextJob()
  deactivate JobTracker
  activate JobHandler

  JobHandler ->> HandleJob : goroutine
  activate HandleJob
  deactivate JobHandler
end

HandleJob -> Worker : <POST Request>
activate Worker
Worker -> Worker : <work hard!>
HandleJob <-- Worker : <HTTP response>
deactivate Worker
HandleJob -> SQS : DeleteMessage(*sqs.Message)
activate SQS
HandleJob <-- SQS
deactivate SQS
HandleJob -> JobTracker : Complete(*Job)
activate JobTracker
JobTracker -> JobTracker : CurrentWorkings.Delete(job.ID())
JobTracker -> JobTracker : <- jobStack
HandleJob <-- JobTracker
deactivate JobTracker
deactivate HandleJob

@enduml